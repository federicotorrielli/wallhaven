#!/bin/sh
# wallhaven - KISS wallpaper downloader and setter
# Usage: wallhaven [OPTIONS] [QUERY]

# Configuration - edit these to your liking
WALLHAVEN_API="https://wallhaven.cc/api/v1"
WALLDIR="${HOME}/.cache/wallhaven"
CURRENT_WALL="${WALLDIR}/current"
API_KEY=""       # Optional: set your API key here for NSFW access
CATEGORIES="111" # 111 = all categories (general/anime/people)
PURITY="100"     # 100 = SFW only, 110 = SFW+sketchy, 111 = all (requires API key)
SORTING="random" # random, date_added, views, favorites, toplist
ORDER=""         # desc (default), asc
TOPRANGE=""      # 1d, 3d, 1w, 1M, 3M, 6M, 1y (requires sorting=toplist)
ATLEAST=""       # e.g., "1920x1080" for minimum resolution
RESOLUTIONS=""   # e.g., "1920x1080,1920x1200" for exact resolutions
RATIOS=""        # e.g., "16x9,16x10" for specific ratios
COLORS=""        # e.g., "660000" for search by color (hex without #)
PAGE=""          # Page number for pagination (default: 1)
SEED=""          # Seed for consistent random results (6 alphanumeric chars) - requires sorting=random

# Create wallpaper directory
mkdir -p "$WALLDIR"

# Print usage
usage() {
	cat <<EOF
wallhaven - KISS wallpaper downloader and setter

USAGE:
    wallhaven [OPTIONS] [QUERY]

OPTIONS:
    -h              Show this help
    -c CATEGORIES   Categories (100/010/001 or combinations like 111)
    -p PURITY       Purity (100=SFW, 110=SFW+sketchy, 111=all)
    -s SORTING      Sorting (random, date_added, views, favorites, toplist)
    -o ORDER        Sorting order (desc, asc)
    -t TOPRANGE     Top range (1d, 3d, 1w, 1M, 3M, 6M, 1y) - requires -s toplist
    -r RESOLUTION   Minimum resolution (e.g., 1920x1080)
    -e RESOLUTIONS  Exact resolutions (e.g., 1920x1080,1920x1200)
    -R RATIOS       Aspect ratios (e.g., 16x9,16x10)
    -C COLORS       Search by color (hex without #, e.g., 660000)
    -P PAGE         Page number for pagination (default: 1)
    -S SEED         Seed for random results (6 alphanumeric chars) - requires -s random
    -k API_KEY      API key for authenticated requests
    -x              Pick random wallpaper from search results (not just first)
    -d              Download only, don't set wallpaper
    -l              List downloaded wallpapers
    -X              Clean cache (remove all downloaded wallpapers)
    -V 		    Use wallrs to display downloaded wallpapers and set them

EXAMPLES:
    wallhaven                           # Random SFW wallpaper
    wallhaven -s toplist landscape      # Top landscape wallpapers
    wallhaven -s toplist -t 1M -x       # Random from top wallpapers (last month)
    wallhaven -r 1920x1080 -R 16x9      # HD 16:9 wallpapers
    wallhaven -e 1920x1080,2560x1440    # Exact resolutions only
    wallhaven -C 660000                 # Search by red color
    wallhaven -c 010 anime girl         # Anime category search
    wallhaven -o asc -s date_added      # Oldest wallpapers first
    wallhaven -P 2 nature               # Page 2 of nature results
    wallhaven -d nature                 # Download only, don't set

QUERY:
    Search terms, tags, or special queries:
    - Simple search: nature landscape
    - Tag search: +landscape -people
    - User uploads: @username
    - Exact tag ID: id:123
    - File type: type:png
    - Similar to: like:wallpaper_id

FILES:
    ~/.cache/wallhaven/    Wallpaper cache directory
    ~/.cache/wallhaven/current    Currently set wallpaper
EOF
}

# Set wallpaper using available tools

set_wallpaper() {
	local file="$1"

	# Check if file exists
	if [ ! -f "$file" ]; then
		printf "Error: Wallpaper file not found: %s\n" "$file" >&2
		return 1
	fi

	# Detect session type
	local session_type="${XDG_SESSION_TYPE:-}"
	local wayland_display="${WAYLAND_DISPLAY:-}"

	# --- Wayland
	if [ "$session_type" = "wayland" ] && [ -n "$wayland_display" ]; then
		if command -v swww >/dev/null 2>&1; then
			# Ensure swww-daemon is running
			if ! pgrep -x swww-daemon >/dev/null 2>&1; then
				printf "Starting swww-daemon...\n" >&2
				swww init || {
					printf "Warning: Failed to start swww-daemon, falling back to swaybg.\n" >&2
				}
				sleep 1
			fi

			# Try to set wallpaper via swww
			if pgrep -x swww-daemon >/dev/null 2>&1; then
				printf "Using swww to set wallpaper...\n" >&2
				swww img "$file" --transition-fps 60 --transition-type fade
				printf "%s" "$file" >"$CURRENT_WALL"
				printf "Wallpaper set (swww): %s\n" "$(basename "$file")"
				return 0
			fi
		fi

		# swaybg
		if command -v swaybg >/dev/null 2>&1; then
			printf "Using swaybg to set wallpaper...\n" >&2
			pkill swaybg 2>/dev/null || true
			swaybg -i "$file" -m fill &
			printf "%s" "$file" >"$CURRENT_WALL"
			printf "Wallpaper set (swaybg): %s\n" "$(basename "$file")"
			return 0
		fi
	fi

	# --- X11
	if [ "$session_type" = "x11" ] || [ -n "$DISPLAY" ]; then
		if command -v feh >/dev/null 2>&1; then
			feh --bg-fill "$file"
		elif command -v nitrogen >/dev/null 2>&1; then
			nitrogen --set-zoom-fill "$file"
		elif command -v xwallpaper >/dev/null 2>&1; then
			xwallpaper --zoom "$file"
		elif command -v gsettings >/dev/null 2>&1; then
			gsettings set org.gnome.desktop.background picture-uri "file://$file"
			gsettings set org.gnome.desktop.background picture-uri-dark "file://$file"
			gsettings set org.gnome.desktop.background picture-options 'zoom'
		else
			printf "Error: No suitable wallpaper setter found for X11.\n" >&2
			return 1
		fi

		printf "%s" "$file" >"$CURRENT_WALL"
		printf "Wallpaper set: %s\n" "$(basename "$file")"
		return 0
	fi

	# --- No suitable environment ---
	printf "Error: No wallpaper setter found. Install one of: swww, swaybg, feh, nitrogen, xwallpaper, or gsettings.\n" >&2
	return 1
}

# Download file from URL
download_file() {
	local url="$1"
	local output="$2"

	if command -v curl >/dev/null 2>&1; then
		curl -sL "$url" -o "$output"
	elif command -v wget >/dev/null 2>&1; then
		wget -q "$url" -O "$output"
	else
		printf "Error: No download tool found. Install curl or wget\n" >&2
		return 1
	fi
}

# Make API request
api_request() {
	local endpoint="$1"
	local params="$2"

	local url="${WALLHAVEN_API}/${endpoint}"
	if [ -n "$params" ]; then
		url="${url}?${params}"
	fi

	# Add API key if provided
	if [ -n "$API_KEY" ]; then
		if [ -n "$params" ]; then
			url="${url}&apikey=${API_KEY}"
		else
			url="${url}?apikey=${API_KEY}"
		fi
	fi

	if command -v curl >/dev/null 2>&1; then
		curl -s "$url"
	elif command -v wget >/dev/null 2>&1; then
		wget -qO- "$url"
	else
		printf "Error: No HTTP tool found. Install curl or wget\n" >&2
		return 1
	fi
}

# Search wallpapers
search_wallpapers() {
	local query="$1"
	local params=""

	# Build query parameters
	[ -n "$CATEGORIES" ] && params="${params}&categories=${CATEGORIES}"
	[ -n "$PURITY" ] && params="${params}&purity=${PURITY}"
	[ -n "$SORTING" ] && params="${params}&sorting=${SORTING}"
	[ -n "$ORDER" ] && params="${params}&order=${ORDER}"
	[ -n "$TOPRANGE" ] && params="${params}&topRange=${TOPRANGE}"
	[ -n "$ATLEAST" ] && params="${params}&atleast=${ATLEAST}"
	[ -n "$RESOLUTIONS" ] && params="${params}&resolutions=${RESOLUTIONS}"
	[ -n "$RATIOS" ] && params="${params}&ratios=${RATIOS}"
	[ -n "$COLORS" ] && params="${params}&colors=${COLORS}"
	[ -n "$PAGE" ] && params="${params}&page=${PAGE}"
	[ -n "$SEED" ] && params="${params}&seed=${SEED}"
	[ -n "$query" ] && params="${params}&q=${query}"

	# Remove leading &
	params="$(printf "%s" "$params" | sed 's/^&//')"

	api_request "search" "$params"
}

# Extract wallpaper info from JSON (simple grep-based parsing)
parse_wallpaper() {
	local json="$1"
	local field="$2"
	local index="${3:-1}" # Default to first result

	printf "%s" "$json" | grep -o "\"${field}\":\"[^\"]*\"" | sed "s/\"${field}\":\"//" | sed 's/"$//' | sed 's/\\\//\//g' | sed -n "${index}p"
}

# Get random number between 1 and N (POSIX-compliant)
random_number() {
	local max="$1"
	local seed

	# Use /dev/urandom if available (most reliable)
	if [ -r /dev/urandom ]; then
		# Read a byte from urandom and convert to number 1-max
		seed="$(od -An -N1 -tu1 /dev/urandom | tr -d ' ')"
		echo "$((seed % max + 1))"
		return
	fi

	# Fallback: use time and PID
	seed="$(date +%s)"
	seed="$((seed + $$))"
	# Simple modulo to get number in range
	echo "$(((seed % max) + 1))"
}

# Get random wallpaper from search results
get_random_wallpaper() {
	local query="$1"
	local json
	local wallpaper_data
	local path
	local id
	local wallpaper_index=1

	printf "Searching for wallpapers" >&2
	[ -n "$query" ] && printf " matching: %s" "$query" >&2
	printf "...\n" >&2

	json="$(search_wallpapers "$query")"

	if [ -z "$json" ] || ! printf "%s" "$json" | grep -q '"data"'; then
		printf "Error: No wallpapers found or API error\n" >&2
		return 1
	fi

	# If random selection is enabled, pick a random wallpaper from results
	if [ "$RANDOM_SELECT" -eq 1 ]; then
		local result_count
		result_count="$(printf "%s" "$json" | grep -o '"id":"[^"]*"' | wc -l)"

		if [ "$result_count" -gt 1 ]; then
			wallpaper_index="$(random_number "$result_count")"
			printf "Randomly selecting wallpaper %d of %d...\n" "$wallpaper_index" "$result_count" >&2
		fi
	fi

	# Extract wallpaper from results
	id="$(parse_wallpaper "$json" "id" "$wallpaper_index")"
	path="$(parse_wallpaper "$json" "path" "$wallpaper_index")"

	if [ -z "$id" ] || [ -z "$path" ]; then
		printf "Error: Could not extract wallpaper info\n" >&2
		return 1
	fi

	printf "Selected wallpaper: %s\n" "$id" >&2

	# Download wallpaper
	local ext
	case "$path" in
	*.jpg) ext=".jpg" ;;
	*.jpeg) ext=".jpeg" ;;
	*.png) ext=".png" ;;
	*) ext=".jpg" ;;
	esac

	local filename="${WALLDIR}/${id}${ext}"

	# Check if already downloaded
	if [ -f "$filename" ]; then
		printf "Using cached wallpaper: %s\n" "$(basename "$filename")" >&2
	else
		printf "Downloading wallpaper...\n" >&2
		if ! download_file "$path" "$filename"; then
			printf "Error: Failed to download wallpaper\n" >&2
			return 1
		fi
		printf "Downloaded: %s\n" "$(basename "$filename")" >&2
	fi

	printf "%s" "$filename"
}

# List downloaded wallpapers
list_wallpapers() {
	if [ ! -d "$WALLDIR" ] || [ -z "$(ls -A "$WALLDIR" 2>/dev/null)" ]; then
		printf "No wallpapers downloaded yet\n"
		return
	fi

	printf "Downloaded wallpapers:\n"
	for file in "$WALLDIR"/*; do
		[ -f "$file" ] || continue
		case "$(basename "$file")" in
		"current") continue ;;
		*) printf "  %s\n" "$(basename "$file")" ;;
		esac
	done

	if [ -f "$CURRENT_WALL" ]; then
		printf "\nCurrent wallpaper: %s\n" "$(cat "$CURRENT_WALL" | xargs basename)"
	fi
}

# Clean cache
clean_cache() {
	if [ -d "$WALLDIR" ]; then
		rm -rf "$WALLDIR"/*
		printf "Cache cleaned\n"
	fi
}

# Parse command line arguments
DOWNLOAD_ONLY=0
RANDOM_SELECT=0
VISUAL_SELECT=0

while getopts "hc:p:s:o:t:r:e:R:C:P:S:k:xdlXV" opt; do
	case "$opt" in
	h)
		usage
		exit 0
		;;
	c) CATEGORIES="$OPTARG" ;;
	p) PURITY="$OPTARG" ;;
	s) SORTING="$OPTARG" ;;
	o) ORDER="$OPTARG" ;;
	t) TOPRANGE="$OPTARG" ;;
	r) ATLEAST="$OPTARG" ;;
	e) RESOLUTIONS="$OPTARG" ;;
	R) RATIOS="$OPTARG" ;;
	C) COLORS="$OPTARG" ;;
	P) PAGE="$OPTARG" ;;
	S) SEED="$OPTARG" ;;
	k) API_KEY="$OPTARG" ;;
	x) RANDOM_SELECT=1 ;;
	d) DOWNLOAD_ONLY=1 ;;
	V) VISUAL_SELECT=1 ;;

	l)
		list_wallpapers
		exit 0
		;;
	X)
		clean_cache
		exit 0
		;;
	*)
		usage >&2
		exit 1
		;;
	esac
done

shift $((OPTIND - 1))
QUERY="$*"

# URL encode query if needed
if [ -n "$QUERY" ]; then
	QUERY="$(printf "%s" "$QUERY" | sed 's/ /+/g')"
fi

# Main execution

main() {
	local wallpaper_file
	local cache_dir="${HOME}/.cache/wallrs"

	mkdir -p "$cache_dir"

	if [ "$VISUAL_SELECT" -eq 1 ]; then
		if ! command -v wallrs >/dev/null 2>&1; then
			printf "Error: 'wallrs' not found in PATH.\n" >&2
			exit 1
		fi

		printf "Launching wallrs visual selector...\n" >&2

		wallrs --print --path "$WALLDIR"

		wallpaper_file="$(ls -1t "$cache_dir"/current.* 2>/dev/null | head -n1)"

		if [ -z "$wallpaper_file" ]; then
			printf "No wallpaper selected.\n" >&2
			exit 1
		fi

		printf "Selected wallpaper: %s\n" "$wallpaper_file"
	else
		wallpaper_file="$(get_random_wallpaper "$QUERY")"
		if [ -z "$wallpaper_file" ]; then
			exit 1
		fi
	fi

	if [ "$DOWNLOAD_ONLY" -eq 0 ]; then
		# Only create wallrs copy when actually setting the wallpaper
		if [ "$VISUAL_SELECT" -eq 0 ]; then
			ext="${wallpaper_file##*.}"
			cp "$wallpaper_file" "$cache_dir/current.$ext"
			wallpaper_file="$cache_dir/current.$ext"
		fi
		printf "Applying wallpaper...\n" >&2
		set_wallpaper "$wallpaper_file"
	else
		printf "%s\n" "$wallpaper_file"
	fi
}

main "$@"
